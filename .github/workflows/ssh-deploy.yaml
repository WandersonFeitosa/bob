name: Deploy to VM

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.VM_SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.VM_KNOWN_HOSTS }}
          if_key_exists: replace

      - name: Create credentials.json
        run: |
          echo "${{ secrets.CREDENTIALS_JSON }}" > credentials/credentials.json

      - name: Deploy to VM
        env:
          VM_HOST: ${{ secrets.VM_HOST }}
          VM_USER: ${{ secrets.VM_USER }}
          VM_DEPLOY_PATH: ${{ secrets.VM_DEPLOY_PATH }}
        run: |
          # Copy files to VM
          scp -r ./* $VM_USER@$VM_HOST:$VM_DEPLOY_PATH

          # Generate .env file
          ssh $VM_USER@$VM_HOST << EOF
            cd $VM_DEPLOY_PATH
            
            # Generate .env file
            cat << EOT > .env
            CLIENT_ID=${{ vars.CLIENT_ID }}
            CLIENT_SECRET=${{ vars.CLIENT_SECRET }}
            DISCORD_TOKEN=${{ vars.DISCORD_TOKEN }}
            ADMIN_ROLES=${{ vars.ADMIN_ROLES }}
            SERVER_ID=${{ vars.SERVER_ID }}
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            JWT_SECRET=${{ vars.JWT_SECRET }}
            MINECRAFT_SERVER_IP=${{ vars.MINECRAFT_SERVER_IP }}
            MINECRAFT_SERVER_PORT=${{ vars.MINECRAFT_SERVER_PORT }}
            MINECRAFT_MANAGER_PORT=${{ vars.MINECRAFT_MANAGER_PORT }}
            MINECRAFT_MANAGER_TOKEN=${{ vars.MINECRAFT_MANAGER_TOKEN }}
            MINECRAFT_ANNOUNCE_CHANNEL_ID=${{ vars.MINECRAFT_ANNOUNCE_CHANNEL_ID }}
            PROJECT_ID=${{ vars.PROJECT_ID }}
            BUCKET_NAME=${{ vars.BUCKET_NAME }}
            APPROVE_ARTS_CHANNEL_ID=${{ vars.APPROVE_ARTS_CHANNEL_ID }}
            ARTS_PANNEL_CHANNEL_ID=${{ vars.ARTS_PANNEL_CHANNEL_ID }}
            NICKS_CHANNEL_ID=${{ vars.NICKS_CHANNEL_ID }}
            SERVER_STATUS_CHANNEL_ID=${{ vars.SERVER_STATUS_CHANNEL_ID }}
            MINECRAFT_SCREEN_NAME=${{ vars.MINECRAFT_SCREEN_NAME }}
            SERVER_LOG_CHANNEL_ID=${{ vars.SERVER_LOG_CHANNEL_ID }}
            TICKET_MESSAGE_ID=${{ vars.TICKET_MESSAGE_ID }}
            TICKET_CATEGORY_ID=${{ vars.TICKET_CATEGORY_ID }}
            ARCHIVE_TICKET_CATEGORY_ID=${{ vars.ARCHIVE_TICKET_CATEGORY_ID }}
            HYBRID_STATUS_CHANNEL_ID=${{ vars.HYBRID_STATUS_CHANNEL_ID }}
            SERVER_STATUS_LIST=${{ vars.SERVER_STATUS_LIST }}
            AUTHOR_AUTHORIZE_CATEGORY_ID=${{ vars.AUTHOR_AUTHORIZE_CATEGORY_ID }}
            PLAYER_NOTIFICATION_CHANNEL_ID=${{ vars.PLAYER_NOTIFICATION_CHANNEL_ID }}
            HYBRID_NOTIFICATION_CHANNEL_ID=${{ vars.HYBRID_NOTIFICATION_CHANNEL_ID }}
            HYBRID_SERVER_ID=${{ vars.HYBRID_SERVER_ID }}
            MINECRAFT_FORCE_START_SCRIPT_PATH=${{ vars.MINECRAFT_FORCE_START_SCRIPT_PATH }}
            GOOGLE_PROJECT=${{ vars.GOOGLE_PROJECT }}
          EOF

      - name: Start Docker Compose
        env:
          VM_HOST: ${{ secrets.VM_HOST }}
          VM_USER: ${{ secrets.VM_USER }}
          VM_DEPLOY_PATH: ${{ secrets.VM_DEPLOY_PATH }}
        run: |
          ssh $VM_USER@$VM_HOST << EOF

            cd $VM_DEPLOY_PATH
            sudo docker compose up -d --build
          EOF
