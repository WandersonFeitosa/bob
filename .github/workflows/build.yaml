name: Build and Publish

on:
  push:
    branches:
      - main

jobs:
  google-cloud-install-and-auth:
    runs-on: ubuntu-latest
    env:
      GOOGLE_APPLICATION_CREDENTIALS: ${{ vars.GOOGLE_APPLICATION_CREDENTIALS }}
      GOOGLE_PROJECT: ${{ vars.GOOGLE_PROJECT }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: ${{ vars.GOOGLE_APPLICATION_CREDENTIALS }}

      - name: install the gcloud cli
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ vars.GOOGLE_PROJECT }}
          install_components: 'gke-gcloud-auth-plugin'

  build-to-artifact-registry:
    runs-on: ubuntu-latest
    needs: google-cloud-install-and-auth
    env:
      PROJECT_NAME: 'bob'
      IMAGE_NAME: 'bot'
      GOOGLE_APPLICATION_CREDENTIALS: ${{ needs.authentication.outputs.credentials_json }}
      GOOGLE_PROJECT: ${{ needs.authentication.outputs.project_id }}
      CLUSTER_NAME: ${{ vars.CLUSTER_NAME }}
      CLUSTER_REGION: ${{ vars.CLUSTER_REGION }}
      CLIENT_ID: ${{ vars.CLIENT_ID }}
      CLIENT_SECRET: ${{ vars.CLIENT_SECRET }}
      DISCORD_TOKEN: ${{ vars.DISCORD_TOKEN }}
      ADMIN_ROLES: ${{ vars.ADMIN_ROLES }}
      SERVER_ID: ${{ vars.SERVER_ID }}
      DATABASE_URL: ${{ vars.DATABASE_URL }}
      JWT_SECRET: ${{ vars.JWT_SECRET }}
      MINECRAFT_SERVER_IP: ${{ vars.MINECRAFT_SERVER_IP }}
      MINECRAFT_SERVER_PORT: ${{ vars.MINECRAFT_SERVER_PORT }}
      MINECRAFT_MANAGER_PORT: ${{ vars.MINECRAFT_MANAGER_PORT }}
      MINECRAFT_MANAGER_TOKEN: ${{ vars.MINECRAFT_MANAGER_TOKEN }}
      MINECRAFT_ANNOUNCE_CHANNEL_ID: ${{ vars.MINECRAFT_ANNOUNCE_CHANNEL_ID }}
      PROJECT_ID: ${{ vars.PROJECT_ID }}
      BUCKET_NAME: ${{ vars.BUCKET_NAME }}
      APPROVE_ARTS_CHANNEL_ID: ${{ vars.APPROVE_ARTS_CHANNEL_ID }}
      ARTS_PANNEL_CHANNEL_ID: ${{ vars.ARTS_PANNEL_CHANNEL_ID }}
    steps:
      - name: build and push the docker image
        run: |
          gcloud auth configure-docker us-central1-docker.pkg.dev
          docker build -t us-central1-docker.pkg.dev$GOOGLE_PROJECT/$PROJECT_NAME/$IMAGE_NAME .
          docker push us-central1-docker.pkg.dev$GOOGLE_PROJECT/$PROJECT_NAME/$IMAGE_NAME

  deploy-to-gke:
    runs-on: ubuntu-latest
    needs: build-to-artifact-registry
    env:
      PROJECT_NAME: 'bob'
      IMAGE_NAME: 'bot'
      GOOGLE_APPLICATION_CREDENTIALS: ${{ needs.authentication.outputs.credentials_json }}
      GOOGLE_PROJECT: ${{ needs.authentication.outputs.project_id }}
      CLUSTER_NAME: ${{ vars.CLUSTER_NAME }}
      CLUSTER_REGION: ${{ vars.CLUSTER_REGION }}
      CLIENT_ID: ${{ vars.CLIENT_ID }}
      CLIENT_SECRET: ${{ vars.CLIENT_SECRET }}
      DISCORD_TOKEN: ${{ vars.DISCORD_TOKEN }}
      ADMIN_ROLES: ${{ vars.ADMIN_ROLES }}
      SERVER_ID: ${{ vars.SERVER_ID }}
      DATABASE_URL: ${{ vars.DATABASE_URL }}
      JWT_SECRET: ${{ vars.JWT_SECRET }}
      MINECRAFT_SERVER_IP: ${{ vars.MINECRAFT_SERVER_IP }}
      MINECRAFT_SERVER_PORT: ${{ vars.MINECRAFT_SERVER_PORT }}
      MINECRAFT_MANAGER_PORT: ${{ vars.MINECRAFT_MANAGER_PORT }}
      MINECRAFT_MANAGER_TOKEN: ${{ vars.MINECRAFT_MANAGER_TOKEN }}
      MINECRAFT_ANNOUNCE_CHANNEL_ID: ${{ vars.MINECRAFT_ANNOUNCE_CHANNEL_ID }}
      PROJECT_ID: ${{ vars.PROJECT_ID }}
      BUCKET_NAME: ${{ vars.BUCKET_NAME }}
      APPROVE_ARTS_CHANNEL_ID: ${{ vars.APPROVE_ARTS_CHANNEL_ID }}
      ARTS_PANNEL_CHANNEL_ID: ${{ vars.ARTS_PANNEL_CHANNEL_ID }}
    steps:
      - name: deploy to GKE
        run: |
          gcloud container clusters get-credentials $CLUSTER_NAME --region $CLUSTER_REGION
          sed -i "s|PROJECT_NAME|$PROJECT_NAME|g" resources.yaml
          sed -i "s|IMAGE_NAME|$IMAGE_NAME|g" resources.yaml
          sed -i "s|GOOGLE_PROJECT|$GOOGLE_PROJECT|g" resources.yaml
          sed -i "s|ENV_CLIENT_ID|$CLIENT_ID|g" resources.yaml
          sed -i "s|ENV_CLIENT_SECRET|$CLIENT_SECRET|g" resources.yaml
          sed -i "s|ENV_DISCORD_TOKEN|$DISCORD_TOKEN|g" resources.yaml
          sed -i "s|ENV_ADMIN_ROLES|$ADMIN_ROLES|g" resources.yaml
          sed -i "s|ENV_SERVER_ID|$SERVER_ID|g" resources.yaml
          sed -i "s|ENV_DATABASE_URL|$DATABASE_URL|g" resources.yaml
          sed -i "s|ENV_JWT_SECRET|$JWT_SECRET|g" resources.yaml   
          sed -i "s|ENV_MINECRAFT_SERVER_IP|$MINECRAFT_SERVER_IP|g" resources.yaml
          sed -i "s|ENV_MINECRAFT_SERVER_PORT|$MINECRAFT_SERVER_PORT|g" resources.yaml
          sed -i "s|ENV_MINECRAFT_MANAGER_PORT|$MINECRAFT_MANAGER_PORT|g" resources.yaml
          sed -i "s|ENV_MINECRAFT_MANAGER_TOKEN|$MINECRAFT_MANAGER_TOKEN|g" resources.yaml
          sed -i "s|ENV_MINECRAFT_ANNOUNCE_CHANNEL_ID|$MINECRAFT_ANNOUNCE_CHANNEL_ID|g" resources.yaml
          sed -i "s|ENV_PROJECT_ID|$PROJECT_ID|g" resources.yaml
          sed -i "s|ENV_BUCKET_NAME|$BUCKET_NAME|g" resources.yaml
          sed -i "s|ENV_APPROVE_ARTS_CHANNEL_ID|$APPROVE_ARTS_CHANNEL_ID|g" resources.yaml  
          sed -i "s|ENV_ARTS_PANNEL_CHANNEL_ID|$ARTS_PANNEL_CHANNEL_ID|g" resources.yaml    
          kubectl apply --record-f resources.yaml

      - name: run a redeploy on the workload
        run: |
          kubectl rollout restart deployment $PROJECT_NAME
